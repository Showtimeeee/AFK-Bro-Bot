import pyautogui
import random
import time
import os
import subprocess
from datetime import datetime

class Actions:
    def __init__(self, config):
        self.config = config
        pyautogui.FAILSAFE = True
        self.text_file_opened = False
        self._init_log_file()
        self._create_text_file()
        # –£–±—Ä–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ - –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –¥–µ–π—Å—Ç–≤–∏–∏
    
    def _init_log_file(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤"""
        if not os.path.exists(self.config.LOG_FILE):
            with open(self.config.LOG_FILE, 'w', encoding='utf-8') as f:
                f.write("=== AFK BOT HISTORY LOG ===\n")
                f.write(f"–°–æ–∑–¥–∞–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write("=" * 50 + "\n\n")
    
    def _create_text_file(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
        if not os.path.exists(self.config.TEXT_FILE_PATH):
            with open(self.config.TEXT_FILE_PATH, 'w', encoding='utf-8') as f:
                f.write("=== AFK Activity File ===\n")
                f.write(f"–°–æ–∑–¥–∞–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write("–≠—Ç–æ—Ç —Ñ–∞–π–ª –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n")
                f.write("=" * 50 + "\n\n")
        print(f"‚úÖ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {self.config.TEXT_FILE_PATH}")
    
    def _open_text_file(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –≤ –±–ª–æ–∫–Ω–æ—Ç–µ"""
        try:
            if not self.text_file_opened:
                print("üìÅ –û—Ç–∫—Ä—ã–≤–∞—é —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –≤ –±–ª–æ–∫–Ω–æ—Ç–µ...")
                
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–ª–æ–∫–Ω–æ—Ç
                subprocess.Popen(['notepad.exe', self.config.TEXT_FILE_PATH])
                
                # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ
                time.sleep(3)
                
                self.text_file_opened = True
                print("‚úÖ –ë–ª–æ–∫–Ω–æ—Ç –æ—Ç–∫—Ä—ã—Ç")
                return True
            return True
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª: {e}")
            return False
    
    def _write_to_log(self, action_type, message):
        """–ó–∞–ø–∏—Å—å –¥–µ–π—Å—Ç–≤–∏—è –≤ –ª–æ–≥-—Ñ–∞–π–ª –±–æ—Ç–∞"""
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        log_entry = f"[{timestamp}] {action_type}: {message}\n"
        
        with open(self.config.LOG_FILE, 'a', encoding='utf-8') as f:
            f.write(log_entry)
        
        return log_entry.strip()
    
    def text_file_action(self):
        """–†–∞–±–æ—Ç–∞ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Ñ–∞–π–ª–æ–º - –∑–∞–ø–∏—Å—å –∏ —Å—Ç–∏—Ä–∞–Ω–∏–µ"""
        try:
            # –£–±–µ–¥–∏–º—Å—è —á—Ç–æ —Ñ–∞–π–ª –æ—Ç–∫—Ä—ã—Ç (—Ç–µ–ø–µ—Ä—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∑–¥–µ—Å—å)
            if not self.text_file_opened:
                success = self._open_text_file()
                if not success:
                    return False, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª"
                time.sleep(2)
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = random.choice(self.config.TEXT_MESSAGES)
            # –ü–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            full_message = f"{timestamp}  {message}"
            
            print(f"üìù –ü–∏—à—É –≤ —Ñ–∞–π–ª: '{message}'")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
            pyautogui.hotkey('ctrl', 'end')
            time.sleep(0.5)
            
            # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            pyautogui.press('enter')
            time.sleep(0.2)
            
            # –ü–µ—á–∞—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            pyautogui.write(full_message, interval=0.05)
            time.sleep(1)
            
            # –ò–Ω–æ–≥–¥–∞ —Å—Ç–∏—Ä–∞–µ–º —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ (40% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏)
            if random.random() < 0.4:
                print("üîô –°—Ç–∏—Ä–∞—é —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞...")
                # –°—Ç–∏—Ä–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤
                erase_count = random.randint(2, 8)
                for _ in range(erase_count):
                    pyautogui.press('backspace')
                    time.sleep(0.1)
                
                # –ü–µ—á–∞—Ç–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                corrections = [" [–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ]", " [updated]", " [fixed]", " [revised]"]
                correction = random.choice(corrections)
                pyautogui.write(correction, interval=0.05)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            pyautogui.hotkey('ctrl', 's')
            time.sleep(0.5)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            self._write_to_log("TEXT_FILE", f"–ó–∞–ø–∏—Å–∞–Ω–æ: '{message}'")
            
            return True, f"–ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª: '{message}'"
                
        except Exception as e:
            error_msg = self._write_to_log("ERROR", f"File action failed: {e}")
            return False, f"‚ùå –û—à–∏–±–∫–∞: {e}"
    
    def get_random_action(self):
        """–í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Ñ–∞–π–ª–æ–º"""
        return self.text_file_action