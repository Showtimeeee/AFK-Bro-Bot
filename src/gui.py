import tkinter as tk
from tkinter import ttk, scrolledtext
import threading
from datetime import datetime, timedelta
import random
import time

class DarkTheme:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã"""
    BG_COLOR = "#2b2b2b"
    FG_COLOR = "#ffffff"
    ACCENT_COLOR = "#bb86fc"
    SECONDARY_BG = "#3c3c3c"
    TEXT_BG = "#1e1e1e"
    TEXT_FG = "#d4d4d4"
    SUCCESS_COLOR = "#4caf50"
    ERROR_COLOR = "#f44336"
    WARNING_COLOR = "#ff9800"
    BUTTON_BG = "#404040"
    BUTTON_FG = "#ffffff"

class AFKBroBotGUI:
    def __init__(self, bot):
        self.bot = bot
        self.root = tk.Tk()
        self.root.title("AFK Bro Bot - –£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
        self.root.geometry("900x700")
        self.root.configure(bg=DarkTheme.BG_COLOR)
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.is_running = False
        self.bot_thread = None
        self.start_time = None
        self.timer_running = False
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
        self.setup_dark_theme()
        self.setup_gui()
    
    def setup_dark_theme(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ç–µ–º–Ω—É—é —Ç–µ–º—É –¥–ª—è –≤–∏–¥–∂–µ—Ç–æ–≤"""
        style = ttk.Style()
        style.theme_use('clam')
        
        # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        style.configure(".", 
                       background=DarkTheme.BG_COLOR,
                       foreground=DarkTheme.FG_COLOR)
        
        # –°—Ç–∏–ª–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –≤–∏–¥–∂–µ—Ç–æ–≤
        style.configure("TFrame", background=DarkTheme.BG_COLOR)
        style.configure("TLabel", 
                       background=DarkTheme.BG_COLOR, 
                       foreground=DarkTheme.FG_COLOR)
        
        style.configure("TButton", 
                       background=DarkTheme.BUTTON_BG,
                       foreground=DarkTheme.BUTTON_FG,
                       focuscolor=DarkTheme.ACCENT_COLOR)
        
        style.configure("TLabelframe", 
                       background=DarkTheme.BG_COLOR,
                       foreground=DarkTheme.ACCENT_COLOR)
        
        style.configure("TLabelframe.Label", 
                       background=DarkTheme.BG_COLOR,
                       foreground=DarkTheme.ACCENT_COLOR)
        
        # –°—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        style.map("TButton",
                 background=[('active', DarkTheme.ACCENT_COLOR),
                           ('pressed', DarkTheme.ACCENT_COLOR)],
                 foreground=[('active', DarkTheme.BUTTON_FG),
                           ('pressed', DarkTheme.BUTTON_FG)])
    
    def setup_gui(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(self.root, 
                               text="ü§ñ AFK Bro Bot", 
                               font=("Arial", 18, "bold"),
                               foreground=DarkTheme.ACCENT_COLOR)
        title_label.pack(pady=15)
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        desc_label = ttk.Label(self.root, 
                              text="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã\n–∏–º–∏—Ç–∏—Ä—É—è —Ä–∞–±–æ—Ç—É —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Ñ–∞–π–ª–æ–º",
                              font=("Arial", 10),
                              foreground=DarkTheme.FG_COLOR)
        desc_label.pack(pady=5)
        
        # –°—Ç–∞—Ç—É—Å –∏ —Ç–∞–π–º–µ—Ä
        self.status_frame = ttk.LabelFrame(self.root, text="üìä –°—Ç–∞—Ç—É—Å", padding=10)
        self.status_frame.pack(fill="x", padx=15, pady=10)
        
        status_content = ttk.Frame(self.status_frame)
        status_content.pack(fill="x")
        
        self.status_label = ttk.Label(status_content, 
                                     text="‚ùå –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", 
                                     font=("Arial", 11, "bold"),
                                     foreground=DarkTheme.ERROR_COLOR)
        self.status_label.pack(side="left")
        
        self.timer_label = ttk.Label(status_content, 
                                    text="‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 00:00:00", 
                                    font=("Arial", 10),
                                    foreground=DarkTheme.ACCENT_COLOR)
        self.timer_label.pack(side="right")
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.control_frame = ttk.Frame(self.root)
        self.control_frame.pack(fill="x", padx=15, pady=10)
        
        self.start_button = ttk.Button(self.control_frame, 
                                      text="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", 
                                      command=self.start_bot)
        self.start_button.pack(side="left", padx=5)
        
        self.stop_button = ttk.Button(self.control_frame, 
                                     text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞", 
                                     command=self.stop_bot, 
                                     state="disabled")
        self.stop_button.pack(side="left", padx=5)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_frame = ttk.LabelFrame(self.root, text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", padding=10)
        stats_frame.pack(fill="x", padx=15, pady=10)
        
        self.stats_text = tk.Text(stats_frame, 
                                 height=4, 
                                 font=("Arial", 9),
                                 bg=DarkTheme.TEXT_BG,
                                 fg=DarkTheme.TEXT_FG,
                                 insertbackground=DarkTheme.FG_COLOR,
                                 relief="flat",
                                 borderwidth=1)
        self.stats_text.pack(fill="x")
        self.stats_text.config(state="disabled")
        self.update_stats()
        
        # –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä
        editor_frame = ttk.LabelFrame(self.root, text="üìù –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä", padding=10)
        editor_frame.pack(fill="both", expand=True, padx=15, pady=10)
        
        # –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
        toolbar = ttk.Frame(editor_frame)
        toolbar.pack(fill="x", pady=5)
        
        ttk.Button(toolbar, 
                  text="üìù –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç", 
                  command=self.add_sample_text).pack(side="left", padx=5)
        ttk.Button(toolbar, 
                  text="üßπ –û—á–∏—Å—Ç–∏—Ç—å", 
                  command=self.clear_editor).pack(side="left", padx=5)
        ttk.Button(toolbar, 
                  text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª", 
                  command=self.save_to_file).pack(side="left", padx=5)
        
        # –ü–æ–ª–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
        self.text_editor = scrolledtext.ScrolledText(editor_frame, 
                                                    height=15, 
                                                    font=("Consolas", 10),
                                                    bg=DarkTheme.TEXT_BG,
                                                    fg=DarkTheme.TEXT_FG,
                                                    insertbackground=DarkTheme.FG_COLOR,
                                                    selectbackground=DarkTheme.ACCENT_COLOR,
                                                    relief="flat",
                                                    wrap="word",
                                                    borderwidth=1)
        self.text_editor.pack(fill="both", expand=True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        self.add_sample_text()
        
        # –õ–æ–≥ –¥–µ–π—Å—Ç–≤–∏–π
        log_frame = ttk.LabelFrame(self.root, text="üìã –õ–æ–≥ –¥–µ–π—Å—Ç–≤–∏–π", padding=10)
        log_frame.pack(fill="x", padx=15, pady=10)
        
        self.log_text = scrolledtext.ScrolledText(log_frame, 
                                                 height=8, 
                                                 font=("Arial", 9),
                                                 bg=DarkTheme.TEXT_BG,
                                                 fg=DarkTheme.TEXT_FG,
                                                 insertbackground=DarkTheme.FG_COLOR,
                                                 selectbackground=DarkTheme.ACCENT_COLOR,
                                                 relief="flat",
                                                 borderwidth=1)
        self.log_text.pack(fill="x")
        self.log_text.config(state="disabled")
        
        # –ü—Ä–æ—Ç–æ–∫–æ–ª –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
    
    def format_time_delta(self, delta):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç timedelta –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç"""
        total_seconds = int(delta.total_seconds())
        hours = total_seconds // 3600
        minutes = (total_seconds % 3600) // 60
        seconds = total_seconds % 60
        return f"{hours:02d}:{minutes:02d}:{seconds:02d}"
    
    def update_timer(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–π–º–µ—Ä —Ä–∞–±–æ—Ç—ã"""
        if self.is_running and self.start_time:
            current_time = datetime.now()
            elapsed = current_time - self.start_time
            time_str = self.format_time_delta(elapsed)
            self.timer_label.config(text=f"‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {time_str}")
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
        if self.timer_running:
            self.root.after(1000, self.update_timer)
    
    def start_timer(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä"""
        self.timer_running = True
        self.start_time = datetime.now()
        self.update_timer()
    
    def stop_timer(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä"""
        self.timer_running = False
        if self.start_time:
            current_time = datetime.now()
            elapsed = current_time - self.start_time
            time_str = self.format_time_delta(elapsed)
            self.timer_label.config(text=f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {time_str}")
    
    def add_sample_text(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–∑–µ—Ü —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä"""
        sample_text = """=== AFK Bro Bot Activity File ===
–°–æ–∑–¥–∞–Ω: {datetime}
–≠—Ç–æ—Ç —Ñ–∞–π–ª –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
==================================================

–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è —Ç–µ–∫—Å—Ç...
""".format(datetime=datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
        
        self.text_editor.config(state="normal")
        self.text_editor.delete(1.0, tk.END)
        self.text_editor.insert(1.0, sample_text)
        self.text_editor.see(tk.END)
        self.text_editor.config(state="normal")
    
    def clear_editor(self):
        """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä"""
        self.text_editor.config(state="normal")
        self.text_editor.delete(1.0, tk.END)
        self.text_editor.config(state="normal")
    
    def save_to_file(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –≤ —Ñ–∞–π–ª"""
        try:
            self.text_editor.config(state="normal")
            content = self.text_editor.get(1.0, tk.END)
            self.text_editor.config(state="normal")
            
            filename = f"afk_bro_bot_activity_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
            with open(filename, "w", encoding="utf-8") as f:
                f.write(content)
            self.log_message("üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω", DarkTheme.SUCCESS_COLOR)
            self.log_message(f"üìÅ –ò–º—è —Ñ–∞–π–ª–∞: {filename}", DarkTheme.FG_COLOR)
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}", DarkTheme.ERROR_COLOR)
    
    def simulate_typing(self):
        """–ò–º–∏—Ç–∏—Ä—É–µ—Ç –Ω–∞–±–æ—Ä —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ"""
        try:
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = random.choice(self.bot.config.TEXT_MESSAGES)
            
            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            full_message = f"{timestamp}  {message}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä
            self.text_editor.config(state="normal")
            self.text_editor.insert(tk.END, f"\n{full_message}")
            self.text_editor.see(tk.END)
            self.text_editor.config(state="normal")
            
            # –ò–Ω–æ–≥–¥–∞ –∏–º–∏—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è (30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏)
            if random.random() < 0.3:
                time.sleep(0.5)  # –ü–∞—É–∑–∞ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
                self.text_editor.config(state="normal")
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
                self.text_editor.insert(tk.END, " [–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ]")
                self.text_editor.see(tk.END)
                self.text_editor.config(state="normal")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            self.bot.actions._write_to_log("TEXT_EDITOR", f"–ó–∞–ø–∏—Å–∞–Ω–æ: '{message}'")
            
            return True, f"–ó–∞–ø–∏—Å—å –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä: '{message}'"
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –∏–º–∏—Ç–∞—Ü–∏–∏: {e}"
            self.bot.actions._write_to_log("ERROR", f"GUI action failed: {e}")
            return False, error_msg
    
    def log_message(self, message, color=None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥"""
        if color is None:
            color = DarkTheme.FG_COLOR
            
        timestamp = datetime.now().strftime("%H:%M:%S")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.log_text.config(state="normal")
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–≤–µ—Ç–æ–º
        self.log_text.insert(tk.END, f"[{timestamp}] ", DarkTheme.ACCENT_COLOR)
        self.log_text.insert(tk.END, f"{message}\n", color)
        
        # –î–µ–ª–∞–µ–º –ª–æ–≥ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
        self.log_text.config(state="disabled")
        self.log_text.see(tk.END)
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.root.update()
    
    def update_stats(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        if self.start_time and self.is_running:
            current_time = datetime.now()
            elapsed = current_time - self.start_time
            time_str = self.format_time_delta(elapsed)
            time_info = f"–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {time_str}\n"
        else:
            time_info = "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 00:00:00\n"
        
        stats = f"""{time_info}–î–µ–π—Å—Ç–≤–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {self.bot.action_count}
–ò–Ω—Ç–µ—Ä–≤–∞–ª: {self.bot.config.INTERVAL} —Å–µ–∫—É–Ω–¥
–†–µ–∂–∏–º: –†–∞–±–æ—Ç–∞ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º"""
        
        self.stats_text.config(state="normal")
        self.stats_text.delete(1.0, tk.END)
        self.stats_text.insert(1.0, stats)
        self.stats_text.config(state="disabled")
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.root.update()
    
    def start_bot(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if not self.is_running:
            self.is_running = True
            self.bot.is_running = True
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self.start_button.config(state="disabled")
            self.stop_button.config(state="normal")
            self.status_label.config(text="‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω", foreground=DarkTheme.SUCCESS_COLOR)
            
            self.log_message("üöÄ –ó–∞–ø—É—Å–∫ AFK Bro Bot...", DarkTheme.ACCENT_COLOR)
            self.log_message("üìù –†–µ–∂–∏–º: –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä", DarkTheme.FG_COLOR)
            self.log_message(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {self.bot.config.INTERVAL} —Å–µ–∫", DarkTheme.FG_COLOR)
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
            self.bot.action_count = 0
            self.bot.start_time = datetime.now()
            self.start_timer()
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ä—Ç
            self.bot.actions._write_to_log("SYSTEM", "=== AFK BRO BOT STARTED ===")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.bot_thread = threading.Thread(target=self.run_bot, daemon=True)
            self.bot_thread.start()
            
            self.log_message("‚úÖ AFK Bro Bot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω", DarkTheme.SUCCESS_COLOR)
            self.update_stats()
    
    def stop_bot(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞"""
        if self.is_running:
            self.is_running = False
            self.bot.is_running = False
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
            self.stop_timer()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self.start_button.config(state="normal")
            self.stop_button.config(state="disabled")
            self.status_label.config(text="‚ùå –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", foreground=DarkTheme.ERROR_COLOR)
            
            self.log_message("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ AFK Bro Bot...", DarkTheme.WARNING_COLOR)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É
            if self.bot.start_time is not None:
                self.bot.stop()
            
            self.update_stats()
            self.log_message("üëã –†–∞–±–æ—Ç–∞ AFK Bro Bot –∑–∞–≤–µ—Ä—à–µ–Ω–∞", DarkTheme.ACCENT_COLOR)
    
    def run_bot(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        self.log_message("üîÑ AFK Bro Bot –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É...", DarkTheme.SUCCESS_COLOR)
        
        try:
            while self.is_running and self.bot.is_running:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                success, message = self.simulate_typing()
                
                if success:
                    self.bot.action_count += 1
                    self.log_message(f"‚úÖ {message}", DarkTheme.SUCCESS_COLOR)
                    self.update_stats()
                else:
                    self.log_message(message, DarkTheme.ERROR_COLOR)
                
                # –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                for i in range(self.bot.config.INTERVAL):
                    if not self.is_running or not self.bot.is_running:
                        break
                    time.sleep(1)
                    
        except Exception as e:
            self.log_message(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", DarkTheme.ERROR_COLOR)
            self.bot.actions._write_to_log("ERROR", f"AFK Bro Bot crashed: {e}")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—Å–ª–∏ –ø–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
        if self.is_running:
            self.stop_bot()
    
    def on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        if self.is_running:
            self.stop_bot()
        self.root.destroy()
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç GUI"""
        self.root.mainloop()
